a <- c(1,3,5)
b <- c(2,0,-2)
a/b # 0으로 나누면 Inf
print(a-10)
print(a^2)
a<-c(1,2,NA,5,8)
mean(a) # 결측치있으면 NA로 나옴
av=mean(a, na.rm=T) # na.rm=T로 결측치 빼고
a[3] <- av
score <- c(100, 88, 99, 100, 99, 100)
score[score>=mean(score)]
score[score>=90]
score[score<=mean(score)]<--1 # true만 -1로 변경
print(score)
score<=mean(score)
# 이렇게 하면 T/F만
b <-  c(90, 80,100,100, 99)
sort(b) #오름차순
score[score==NA]
score[a==NA]
a[a==NA]
a<-c(1,2,NA,5,8)
mean(a) # 결측치있으면 NA로 나옴
av<-mean(a, na.rm=T) # na.rm=T로 결측치 빼고
a[3] <- av
a<-c(1,2,NA,5,8)
a[is.na(a)] <- av
a
a<-c(1,2,NA,5,NA)
av<-mean(a, na.rm=T) # na.rm=T로 결측치 빼고
a[is.na(a)] <- av
a
a <- list(1:3, 4:10)
a
b <- list(a=c(1:3),b=(4:10))
b
b <- list(a=c(1:3),b=(4:10))
b
b <- list(a=c(1:3),b=(4:10))
a
b
a
b <- list(a=c(1:3),b=(4:10))
a
b <- list(a=c(1:3),b=(4:10))
a
b
b[[1]]
b$a
b[1]
c<-list(1:5, c(1:3),matrix(1:12,nrow=3))
c
c[[1]][1]
c<-list(a=(1:5), c(1:3),matrix(1:12,nrow=3))
c
c[[1]][1]
c$a[3]
b[1]
b[1]
b[[1]]
c[a]
c<-list(a=(1:5), c(1:3),matrix(1:12,nrow=3))
c[a]
c[[a]]
c[['a']]
c['a']
b$a
a <- list(num<-c(1:5),score<-c(99,88,99,100,100))
a$num
a <- list(num=c(1:5),score=c(99,88,99,100,100))
a$num
a$score>=90
a$num[a$score>=90]
a$num[a$score>=90]
a <- list(num=c(1:5),score=c(99,88,99,100))
a$score>=90
a$num[a$score>=90]
a <- list(num=c(1:5),score=c(99,88,99,100,100,100))
a$score>=90
a$num[a$score>=90]
a <- list(num=c(1:5),score=c(99,88,99,100,100,100))
a$score>=90
a$num[a$score>=90]
# 필터조건이 더 적을때
a <- list(num=c(1:5),score=c(99,88,99,100))
a$score>=90
a$num[a$score>=90] #
a <- list(num=c(1:5),score=c(99,88,99))
a$score>=90
a$num[a$score>=90] # 1 3 4 5
# 필터조건이 더 적을때
a <- list(num=c(1:5),score=c(99))
a$score>=90
a$num[a$score>=90] # 1 3 4
# 필터조건이 더 적을때
a <- list(num=c(1:5),score=c(99, 88))
a$score>=90
a$num[a$score>=90] # 1 3 4
a <- list(num=c(1:5),score=c(99, 88))
a$score>=90
a$num[a$score>=90] # 1 3 5
# 필터조건이 더 적을때
a <- list(num=c(1:5),score=c(99, 88, 99))
a$score>=90 # TRUE FALSE
a$num[a$score>=90] # 1 3 5
a <- list(1,2,3)
a
a$num <- c(4:6)
a
a$num[1] <-1
a
a$num <- NULL
a
a<- NULL
a
a <- list(1:5)
b <- list(4:10)
lapply(c(a,b), min)
sapply(c(a,b), min)
a <- list(1:5, 0:5)
b <- list(4:10)
lapply(c(a,b), min)
sapply(c(a,b), min)
a <- list(1:5, list(0:5, c(-1,3,5))
b <- list(4:10)
a <- list(1:5, list(0:5, list(-1:4)))
b <- list(4:10)
lapply(c(a,b), min) # [[1]] 1 [[2]] 0 [[3]] 4
a <- list(1:5, c(0,1,2))
b <- list(4:10)
lapply(c(a,b), min) # [[1]] 1 [[2]] 0 [[3]] 4
sapply(c(a,b), min) # 1 0 4
test
test <- factor(c('sw', 'com', 'design'))
test
test <- factor(c('sw', 'com', 'design'))
test
test2 <- factor(c(1,2,3,2,5,5,1,2,3,4,5))
test2
level(test2)
levels(test2)
nlevel(test2)
nlevels(test2)
data()
str(iris)
levels(iris$Species)
str(iris)
levels(iris$Species)<- c("예쁜꽃","더예쁜꽃","아주예쁜꽃")
head(iris)
levels(iris$Species)
print(iris)
a<-c(1,2,3)
a[-1]
a<-matrix(1:12, nrow=3)
a[a%%2==0]
a[a%%2==0,a%%2==0]
a<-matrix(1:12, nrow=3)
a[a<4,a<2]
a[a<4, drop=F]
# 인덱싱 ####
a<-matrix(1:12, nrow=3)
a[a%%2==0, drop=F]
# 배열####
a<- array(1:12,dim=(3,2,2))
# 배열####
a<- array(1:12,dim=C(3,2,2))
a <- array(1:12, dim=C(3,2,2))
a <- array(1:12, dim=c(3,2,2))
a
mat1<-matrix(1:6, ncol = 3, byrow=T)
mat1[mat1[,3]>3,]
mat1<-matrix(1:6, ncol = 3, byrow=T)
mat1[mat1[,3]>3,drop=F]
mat1<-matrix(1:6, ncol = 3, byrow=T)
mat1[mat1[,3]>3,,drop=F]
mat1[mat1[,2]==2,,drop=F]#2열의 값이 2인걸 가지고 있는 행 필터링
mat1<-matrix(1:9, nrow = 3)
mat2<-matrix(c(10,20,30,40,50,60,70,80,90), nrow = 3)
mat1+10 #대입은 아님
mat1+mat2 # 크기다르면 연산 x
colSums(mat1)
rowsums(mat1)
mat1<-matrix(1:9, nrow = 3)
mat2<-matrix(c(10,20,30,40,50,60,70,80,90), nrow = 3)
mat1+10 #대입은 아님
mat1+mat2 # 크기다르면 연산 x
colSums(mat1)
rowsum(mat1)
mat1<-matrix(1:9, nrow = 3)
mat2<-matrix(c(10,20,30,40,50,60,70,80,90), nrow = 3)
mat1+10 #대입은 아님
mat1+mat2 # 크기다르면 연산 x
colSums(mat1)
rowSum(mat1)
# matrix연산 ####
mat1<-matrix(1:9, nrow = 3)
mat2<-matrix(c(10,20,30,40,50,60,70,80,90), nrow = 3)
mat1+10 #대입은 아님
mat1+mat2 # 크기다르면 연산 x
colSums(mat1)
rowSums(mat1)
is.element(b,a)
is.element(a,b)
a <-c(1,2,3,4,5)
b <-c(1,2,3)
is.element(a,b)
is.element(b,a)
a %in% b
# 샘플 벡터 생성
vec <- c(1, 2, NA, 4, NA, 6)
# 결측치가 있는 위치를 알아냄
na_positions <- which(is.na(vec))
print(na_positions)
# 샘플 벡터 생성
vec <- c(1, 2, NA, 4, NA, 6)
# 결측치를 제외한 벡터 생성
clean_vec <- vec[!is.na(vec)]
print(clean_vec)
class(a[1])
a <- list(num=c(1:5),score=c(99, 88))
a$score>=90 # TRUE FALSE
a$num[a$score>=90] # 1 3 5 TRUE FLASE를 반복함
class(a[1])
class(a[1][1])
a[1][1]
a <-c(1:5)
b <-c(6:10)  #벡터의 합으로 만들기
a
b
test1<-cbind(a,b)
test1
test2<-rbind(a,b)
test2
a <-c(1:5)
colnames(a)<-c('a','b','c','d') # 크기 다르면 안 들어감
a <- matrix(1:12, nrow=3, ncol=4, byrow=T)
colnames(a)<-c('a','b','c','d') # 크기 다르면 안 들어감
rownames(a)<-c('kim','lee','park')
a[1:2,-1]
a[a%%2==0, drop=F]
mat1<-matrix(1:6, ncol = 3, byrow=T)
mat1[mat1[,3]>3,,drop=F]#3열의 값이 3보다 큰 걸 가지고 있는 행 필터링
mat1[mat1[,2]==2,,drop=F]#2열의 값이 2인걸 가지고 있는 행 필터링
a %in% b
a[2,]>=4
a[a[2,]>=4]
a[a[2,]>=4, drop=F]
mat1[mat1[,2]==2,]#2열의 값이 2인걸 가지고 있는 행 필터링
mat1[mat1[,3]>3,drop=F]#
mat1[mat1[,3]>3,,drop=F]#3열
mat1[mat1[,2]==2,]#2열의 값이 2인걸 가지고 있는 행 필터링
mat1[mat1[,3]>3,ncol=1,drop=F]#3열
mat1[mat1[,3]>3,,drop=F]#
mat1[-1,-1,,drop=F]#
mat1[-1,-1,,drop=F]#
mat1[2,2,,drop=F]#
mat1<-matrix(1:6, ncol = 3, byrow=T)
mat1[mat1[,3]>3,,drop=F]#3열의 값이 3보다 큰 걸 가지고 있는 행 필터링
mat1[mat1[,2]==2,]#2열의 값이 2인걸 가지고 있는 행 필터링
mat1[2,2,,drop=F]#
mat1[2,2,drop=F]#
a[a%%2==0, drop=F]
a[a%%2==0, ,drop=F]
a[a%%2==0, drop=F]
mat1[mat1[,3]>3,,drop=F]#3열
mat1[mat1[,2]==2,]#2열의 값이 2인걸 가지고 있는 행 필터링
('kim','lee','park')
mat1[mat1[,2]==2,,drop=F]#2열의 값이 2인걸 가지고 있는 행 필터링
mat1[mat1[,2]==2,drop=F]#2열의 값이 2인걸 가지고 있는 행 필터링, drop 3번째인수
# 배열####
a<-matrix(1:12, nrow=3)
a<-a[,-c(1,3)] # 열삭제
mat1[2,2,drop=F]# 인덱싱시 drop은 3번째
# 필터링 ####
a[a%%2==0, drop=F]
a[a%%2==0,, drop=F]
a[a%%2==0]
Orange
Orange
install.packages("ggplot2")
library(ggplot2)
search()
search(ggplot2)
rep(F,10,each=5)
rep(1:2,2,each=5)
a = rep(1:2,2,each=5)
a[-1:3]
a = rep(1:2,2,each=5)
a[-c(1:3)]
a<-seq(10,20)
print(a)
sales <- c(100,99,88,100,100)
names(sales)<- c('1','2','3','4','5')
cumsum(sales)
sort(b) #오름차순
cummin(b)
cummax(b)
sales <- c(100,99,88,100,100)
names(sales)<- c('1','2','3','4','5')
cumsum(sales)
sort(sales) #오름차순
cummin(sales)
cummax(sales)
a<-matrix(seq(10,20),2)
print(a)
a<-matrix(seq(10,20),3)
print(a)
a<-matrix(seq(10,19),2)
b<-matrix(seq(10,19),5)
print(a-b)
a[a%%2==0]
mat1<-matrix(1:6, ncol = 3, byrow=T)
mat1[mat1[,3]>3,,drop=F]#3열의 값이 3보다 큰 걸 가지고 있는 행 필터링, drop 3번째인수
mat1[mat1[,2]==2,drop=F]#2열의 값이 2인걸 가지고 있는 행 필터링, drop 3번째인수
a <- matrix(1:12, nrow=3, ncol=4, byrow=T)
colnames(a)<-c('a','b','c','d') # 크기 다르면 안 들어감
rownames(a)<-c('kim','lee','park')
a[1:2,-1]
a[a%%2==0, drop=F]
a[2,]>=4
a[a[2,]>=4, drop=F]
mat1<-matrix(1:6, ncol = 3, byrow=T)
mat1[mat1[,3]>3,,drop=F]#3열의 값이 3보다 큰 걸 가지고 있는 행 필터링
mat1[mat1[,2]==2,,drop=F]#2열의 값이 2인걸 가지고 있는 행 필터링
a[a[2,]>=4, drop=F]
a[a[,2]>=4, drop=F]
a[1:2,-1]
mat1<-matrix(1:6, ncol = 3, byrow=T)
mat1<-matrix(1:6, ncol = 3, byrow=T)
mat1<-matrix(1:6, ncol = 3)
mat1
a<-matrix(1:12, nrow=3)
a<-a[,-c(1,3)] # 열삭제
mat1[2,2,drop=F]# 인덱싱시 drop은 3번째
mat1[mat1>3,,drop=F]#3
mat1[mat1>3,drop=F]#3열
mat1<-matrix(1:6, ncol = 3, byrow=T)
mat1[mat1>3,drop=F]#
mat1<-matrix(1:6, ncol = 3, byrow=T)
mat1
mat1[mat1>3,drop=F]#3열의
mat1<-matrix(1:12, ncol = 3, byrow=T)
mat1
mat1[mat1>3,drop=F]#3열
a<-matrix(seq(10,19),nrow= 2, ncol=10)
b<-matrix(seq(10,19),5)
print(a-b)
print(a)
a<-matrix(seq(10,19),nrow= 2, ncol=4)
a<-3.5
b<-round(a)
c<-ceiling(a)
print(b+c)
a<-'h y c u'
b<-'univ '
print(nchar(a)+nchar(b))
print(1,2,3)
cat(1,2,3)
a<-T
b<-F
print((a==b)|(!b))
mat1<-matrix(1:12, nrow=2, byrow=T)
mat1
_score1<-1
a = rep(1:3,2,each=3)
a
a<-(13%/%2)
b<-(13%%2)
print(a+b)
a<-'h y c u'
b<-'univ '
print(nchar(a)+nchar(b))
print(1,2,3)
cat(1,2,3)
mat1<-matrix(1:12, nrow=2, byrow=T)
mat1
a<-(13%/%2)
b<-(13%%2)
print(a+b)
load("C:/Users/wogns/OneDrive/바탕 화면/Data_study/R스크립트/.RData")
setwd("C:/Users/wogns/OneDrive/바탕 화면/Data_study/R스크립트")
# 데이터 프레임 ####
df<-data.frame(no=c(1:5),names=c("K","L","P"), score=c(100,90,80))
# 데이터 프레임 ####
df<-data.frame(no=c(1:5),names=c("K","L","P","C","Y"), score=c(100,90,80,70,60))
df
# 데이터 프레임 ####
df<-data.frame(no=c(1:5),names=c("K","L","P","C","Y"), score=c(100,90,80,70,60))
df
rownames(df)<-c("a","b","c","d","e")
df
names=c("K","L","P","C","Y")
score=c(100,90,80,70,60)
df1<-data.frame(names,score)
df1
df2<-data.frame(matrix(1:12, nrow = 2),matrix(1:12,nrow = 2))
df2
# 행, 열 추가삭제 ####
df<-data.frame(A=c(1,2,3), B=c('a','b','c'))
t<-data.frame(A=4, b="d")
df<- rbind(df,t)
df<-data.frame(A=c(1,2,3), B=c('a','b','c'))
t<-data.frame(A = 4, B ="d")
df<- rbind(df,t)
df
df<-data.frame(A=c(1,2,3), B=c('a','b','c'))
c_t<-c(4,5,6)
df<- cbind(df,c_t)
df
c_t<-c(4,5,6,7)
df<- cbind(df,c_t)
df<-data.frame(A=c(1,2,3), B=c('a','b','c'))
t<-data.frame(A = 4, B ="d") # 열이름 다으렴 에러
df<- rbind(df,t)
df[-4,]
df
df<-data.frame(A=c(1,2,3), B=c('a','b','c'))
t<-data.frame(A = 4, B ="d") # 열이름 다으렴 에러
df<- rbind(df,t)
df<-df[-4,]
df
df<-data.frame(no=c(1:5),names=c("K","L","P","C","Y"), score=c(100,90,80,70,60))
df
df[1,1]
df$names
df$names[2]
df<-data.frame(no=c(1:5),names=c("K","L","P","C","Y"), score=c(100,90,80,70,60))
df[df$score>90,]
df<-data.frame(no=c(1:5),names=c("K","L","P","C","Y"), score=c(100,90,80,70,60))
df[df$score>90,]
df[,df$score>90]
df[df$score>9=mean(df$score),]
df[df$score>=mean(df$score),]
df<-data.frame(no=c(1:5),names=c("K","L","P","C","Y"), score=c(100,90,80,70,60))
unique(df)
table(df$names)
duplicated(df)
