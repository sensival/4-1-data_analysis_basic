# 배열####
a<- array(1:12,dim=C(3,2,2))
a <- array(1:12, dim=C(3,2,2))
a <- array(1:12, dim=c(3,2,2))
a
mat1<-matrix(1:6, ncol = 3, byrow=T)
mat1[mat1[,3]>3,]
mat1<-matrix(1:6, ncol = 3, byrow=T)
mat1[mat1[,3]>3,drop=F]
mat1<-matrix(1:6, ncol = 3, byrow=T)
mat1[mat1[,3]>3,,drop=F]
mat1[mat1[,2]==2,,drop=F]#2열의 값이 2인걸 가지고 있는 행 필터링
mat1<-matrix(1:9, nrow = 3)
mat2<-matrix(c(10,20,30,40,50,60,70,80,90), nrow = 3)
mat1+10 #대입은 아님
mat1+mat2 # 크기다르면 연산 x
colSums(mat1)
rowsums(mat1)
mat1<-matrix(1:9, nrow = 3)
mat2<-matrix(c(10,20,30,40,50,60,70,80,90), nrow = 3)
mat1+10 #대입은 아님
mat1+mat2 # 크기다르면 연산 x
colSums(mat1)
rowsum(mat1)
mat1<-matrix(1:9, nrow = 3)
mat2<-matrix(c(10,20,30,40,50,60,70,80,90), nrow = 3)
mat1+10 #대입은 아님
mat1+mat2 # 크기다르면 연산 x
colSums(mat1)
rowSum(mat1)
# matrix연산 ####
mat1<-matrix(1:9, nrow = 3)
mat2<-matrix(c(10,20,30,40,50,60,70,80,90), nrow = 3)
mat1+10 #대입은 아님
mat1+mat2 # 크기다르면 연산 x
colSums(mat1)
rowSums(mat1)
is.element(b,a)
is.element(a,b)
a <-c(1,2,3,4,5)
b <-c(1,2,3)
is.element(a,b)
is.element(b,a)
a %in% b
# 샘플 벡터 생성
vec <- c(1, 2, NA, 4, NA, 6)
# 결측치가 있는 위치를 알아냄
na_positions <- which(is.na(vec))
print(na_positions)
# 샘플 벡터 생성
vec <- c(1, 2, NA, 4, NA, 6)
# 결측치를 제외한 벡터 생성
clean_vec <- vec[!is.na(vec)]
print(clean_vec)
class(a[1])
a <- list(num=c(1:5),score=c(99, 88))
a$score>=90 # TRUE FALSE
a$num[a$score>=90] # 1 3 5 TRUE FLASE를 반복함
class(a[1])
class(a[1][1])
a[1][1]
a <-c(1:5)
b <-c(6:10)  #벡터의 합으로 만들기
a
b
test1<-cbind(a,b)
test1
test2<-rbind(a,b)
test2
a <-c(1:5)
colnames(a)<-c('a','b','c','d') # 크기 다르면 안 들어감
a <- matrix(1:12, nrow=3, ncol=4, byrow=T)
colnames(a)<-c('a','b','c','d') # 크기 다르면 안 들어감
rownames(a)<-c('kim','lee','park')
a[1:2,-1]
a[a%%2==0, drop=F]
mat1<-matrix(1:6, ncol = 3, byrow=T)
mat1[mat1[,3]>3,,drop=F]#3열의 값이 3보다 큰 걸 가지고 있는 행 필터링
mat1[mat1[,2]==2,,drop=F]#2열의 값이 2인걸 가지고 있는 행 필터링
a %in% b
a[2,]>=4
a[a[2,]>=4]
a[a[2,]>=4, drop=F]
mat1[mat1[,2]==2,]#2열의 값이 2인걸 가지고 있는 행 필터링
mat1[mat1[,3]>3,drop=F]#
mat1[mat1[,3]>3,,drop=F]#3열
mat1[mat1[,2]==2,]#2열의 값이 2인걸 가지고 있는 행 필터링
mat1[mat1[,3]>3,ncol=1,drop=F]#3열
mat1[mat1[,3]>3,,drop=F]#
mat1[-1,-1,,drop=F]#
mat1[-1,-1,,drop=F]#
mat1[2,2,,drop=F]#
mat1<-matrix(1:6, ncol = 3, byrow=T)
mat1[mat1[,3]>3,,drop=F]#3열의 값이 3보다 큰 걸 가지고 있는 행 필터링
mat1[mat1[,2]==2,]#2열의 값이 2인걸 가지고 있는 행 필터링
mat1[2,2,,drop=F]#
mat1[2,2,drop=F]#
a[a%%2==0, drop=F]
a[a%%2==0, ,drop=F]
a[a%%2==0, drop=F]
mat1[mat1[,3]>3,,drop=F]#3열
mat1[mat1[,2]==2,]#2열의 값이 2인걸 가지고 있는 행 필터링
('kim','lee','park')
mat1[mat1[,2]==2,,drop=F]#2열의 값이 2인걸 가지고 있는 행 필터링
mat1[mat1[,2]==2,drop=F]#2열의 값이 2인걸 가지고 있는 행 필터링, drop 3번째인수
# 배열####
a<-matrix(1:12, nrow=3)
a<-a[,-c(1,3)] # 열삭제
mat1[2,2,drop=F]# 인덱싱시 drop은 3번째
# 필터링 ####
a[a%%2==0, drop=F]
a[a%%2==0,, drop=F]
a[a%%2==0]
Orange
Orange
install.packages("ggplot2")
library(ggplot2)
search()
search(ggplot2)
rep(F,10,each=5)
rep(1:2,2,each=5)
a = rep(1:2,2,each=5)
a[-1:3]
a = rep(1:2,2,each=5)
a[-c(1:3)]
a<-seq(10,20)
print(a)
sales <- c(100,99,88,100,100)
names(sales)<- c('1','2','3','4','5')
cumsum(sales)
sort(b) #오름차순
cummin(b)
cummax(b)
sales <- c(100,99,88,100,100)
names(sales)<- c('1','2','3','4','5')
cumsum(sales)
sort(sales) #오름차순
cummin(sales)
cummax(sales)
a<-matrix(seq(10,20),2)
print(a)
a<-matrix(seq(10,20),3)
print(a)
a<-matrix(seq(10,19),2)
b<-matrix(seq(10,19),5)
print(a-b)
a[a%%2==0]
mat1<-matrix(1:6, ncol = 3, byrow=T)
mat1[mat1[,3]>3,,drop=F]#3열의 값이 3보다 큰 걸 가지고 있는 행 필터링, drop 3번째인수
mat1[mat1[,2]==2,drop=F]#2열의 값이 2인걸 가지고 있는 행 필터링, drop 3번째인수
a <- matrix(1:12, nrow=3, ncol=4, byrow=T)
colnames(a)<-c('a','b','c','d') # 크기 다르면 안 들어감
rownames(a)<-c('kim','lee','park')
a[1:2,-1]
a[a%%2==0, drop=F]
a[2,]>=4
a[a[2,]>=4, drop=F]
mat1<-matrix(1:6, ncol = 3, byrow=T)
mat1[mat1[,3]>3,,drop=F]#3열의 값이 3보다 큰 걸 가지고 있는 행 필터링
mat1[mat1[,2]==2,,drop=F]#2열의 값이 2인걸 가지고 있는 행 필터링
a[a[2,]>=4, drop=F]
a[a[,2]>=4, drop=F]
a[1:2,-1]
mat1<-matrix(1:6, ncol = 3, byrow=T)
mat1<-matrix(1:6, ncol = 3, byrow=T)
mat1<-matrix(1:6, ncol = 3)
mat1
a<-matrix(1:12, nrow=3)
a<-a[,-c(1,3)] # 열삭제
mat1[2,2,drop=F]# 인덱싱시 drop은 3번째
mat1[mat1>3,,drop=F]#3
mat1[mat1>3,drop=F]#3열
mat1<-matrix(1:6, ncol = 3, byrow=T)
mat1[mat1>3,drop=F]#
mat1<-matrix(1:6, ncol = 3, byrow=T)
mat1
mat1[mat1>3,drop=F]#3열의
mat1<-matrix(1:12, ncol = 3, byrow=T)
mat1
mat1[mat1>3,drop=F]#3열
a<-matrix(seq(10,19),nrow= 2, ncol=10)
b<-matrix(seq(10,19),5)
print(a-b)
print(a)
a<-matrix(seq(10,19),nrow= 2, ncol=4)
a<-3.5
b<-round(a)
c<-ceiling(a)
print(b+c)
a<-'h y c u'
b<-'univ '
print(nchar(a)+nchar(b))
print(1,2,3)
cat(1,2,3)
a<-T
b<-F
print((a==b)|(!b))
mat1<-matrix(1:12, nrow=2, byrow=T)
mat1
_score1<-1
a = rep(1:3,2,each=3)
a
a<-(13%/%2)
b<-(13%%2)
print(a+b)
a<-'h y c u'
b<-'univ '
print(nchar(a)+nchar(b))
print(1,2,3)
cat(1,2,3)
mat1<-matrix(1:12, nrow=2, byrow=T)
mat1
a<-(13%/%2)
b<-(13%%2)
print(a+b)
load("C:/Users/wogns/OneDrive/바탕 화면/Data_study/R스크립트/.RData")
setwd("C:/Users/wogns/OneDrive/바탕 화면/Data_study/R스크립트")
# 데이터 프레임 ####
df<-data.frame(no=c(1:5),names=c("K","L","P"), score=c(100,90,80))
# 데이터 프레임 ####
df<-data.frame(no=c(1:5),names=c("K","L","P","C","Y"), score=c(100,90,80,70,60))
df
# 데이터 프레임 ####
df<-data.frame(no=c(1:5),names=c("K","L","P","C","Y"), score=c(100,90,80,70,60))
df
rownames(df)<-c("a","b","c","d","e")
df
names=c("K","L","P","C","Y")
score=c(100,90,80,70,60)
df1<-data.frame(names,score)
df1
df2<-data.frame(matrix(1:12, nrow = 2),matrix(1:12,nrow = 2))
df2
# 행, 열 추가삭제 ####
df<-data.frame(A=c(1,2,3), B=c('a','b','c'))
t<-data.frame(A=4, b="d")
df<- rbind(df,t)
df<-data.frame(A=c(1,2,3), B=c('a','b','c'))
t<-data.frame(A = 4, B ="d")
df<- rbind(df,t)
df
df<-data.frame(A=c(1,2,3), B=c('a','b','c'))
c_t<-c(4,5,6)
df<- cbind(df,c_t)
df
c_t<-c(4,5,6,7)
df<- cbind(df,c_t)
df<-data.frame(A=c(1,2,3), B=c('a','b','c'))
t<-data.frame(A = 4, B ="d") # 열이름 다으렴 에러
df<- rbind(df,t)
df[-4,]
df
df<-data.frame(A=c(1,2,3), B=c('a','b','c'))
t<-data.frame(A = 4, B ="d") # 열이름 다으렴 에러
df<- rbind(df,t)
df<-df[-4,]
df
df<-data.frame(no=c(1:5),names=c("K","L","P","C","Y"), score=c(100,90,80,70,60))
df
df[1,1]
df$names
df$names[2]
df<-data.frame(no=c(1:5),names=c("K","L","P","C","Y"), score=c(100,90,80,70,60))
df[df$score>90,]
df<-data.frame(no=c(1:5),names=c("K","L","P","C","Y"), score=c(100,90,80,70,60))
df[df$score>90,]
df[,df$score>90]
df[df$score>9=mean(df$score),]
df[df$score>=mean(df$score),]
df<-data.frame(no=c(1:5),names=c("K","L","P","C","Y"), score=c(100,90,80,70,60))
unique(df)
table(df$names)
duplicated(df)
# 결측치 처리 ####
df<-data.frame(no=c(1:5),names=c("K","L","P","C","Y"), score1=c(100,NA,80,70,60),score2=c(100,90,80,70,60))
mean(df$score1)
# 결측치 처리 ####
df<-data.frame(no=c(1:5),names=c("K","L","P","C","Y"), score1=c(100,NA,80,70,60),score2=c(100,90,80,70,60))
mean(df$score1) #NA
mean(df$score1, na.rm=T) #NA
# 결측치 처리 ####
df<-data.frame(no=c(1:5),names=c("K","L","P","C","Y"), score1=c(100,NA,80,70,60),score2=c(100,90,80,70,60))
mean(df$score1) #NA
mean(df$score1, na.rm=T) #NA
df[is.na(df$score1),]<-,mean[df$score1,na.rm=T]
# 결측치 처리 ####
df<-data.frame(no=c(1:5),names=c("K","L","P","C","Y"), score1=c(100,NA,80,70,60),score2=c(100,90,80,70,60))
mean(df$score1) #NA
mean(df$score1, na.rm=T) #NA
df[is.na(df$score1),]<-mean[df$score1, na.rm=T]
# 결측치 처리 ####
df<-data.frame(no=c(1:5),names=c("K","L","P","C","Y"), score1=c(100,NA,80,70,60),score2=c(100,90,80,70,60))
mean(df$score1) #NA
mean(df$score1, na.rm=T) #NA
df[is.na(df$score1),]<-mean(df$score1, na.rm=T)
# 결측치 처리 ####
df<-data.frame(no=c(1:5),names=c("K","L","P","C","Y"), score1=c(100,NA,80,70,60),score2=c(100,90,80,70,60))
mean(df$score1) #NA
mean(df$score1, na.rm=T) #NA
df[is.na(df$score1),]<-mean(df$score1, na.rm=T)
df
# 결측치 처리 ####
df<-data.frame(no=c(1:5),names=c("K","L","P","C","Y"), score1=c(100,NA,80,70,60),score2=c(100,90,80,70,60))
mean(df$score1) #NA
mean(df$score1, na.rm=T) #NA
df[is.na(df$score1)]<-mean(df$score1, na.rm=T)
df
# 결측치 처리 ####
df<-data.frame(no=c(1:5),names=c("K","L","P","C","Y"), score1=c(100,NA,80,70,60),score2=c(100,90,80,70,60))
mean(df$score1) #NA
mean(df$score1, na.rm=T) #NA
df[is.na(df$score1),]<-mean(df$score1, na.rm=T)
df
# 결측치 처리 ####
df<-data.frame(no=c(1:5),names=c("K","L","P","C","Y"), score1=c(100,NA,80,70,60),score2=c(100,90,80,70,60))
mean(df$score1) #NA
mean(df$score1, na.rm=T) #NA
df[is.na(df$score1),"score1"]<-mean(df$score1, na.rm=T) # 이렇게하면 행 다바뀜
df
# 결측치 처리 ####
df<-data.frame(no=c(1:5),names=c("K","L","P","C","Y"), score1=c(100,NA,80,70,60),score2=c(100,90,80,70,60))
mean(df$score1) #NA
mean(df$score1, na.rm=T) #NA
df[is.na(df$score1),]<-mean(df$score1, na.rm=T) # 이렇게하면 행 다바뀜
df[is.na(df$score1),"score1"]<-mean(df$score1, na.rm=T) # 이렇게하면 행 다바뀜
df
df[is.na(df$score1),"score1"]<-mean(df$score1, na.rm=T) # 이렇게하면 행 다바뀜
df
df<-data.frame(no=c(1:5),names=c("K","L","P","C","Y"), score1=c(100,NA,80,70,60),score2=c(100,90,80,70,60))
mean(df$score1) #NA
mean(df$score1, na.rm=T) #NA
#df[is.na(df$score1),]<-mean(df$score1, na.rm=T) # 이렇게하면 행 다바뀜
df[is.na(df$score1),"score1"]<-mean(df$score1, na.rm=T) # 이렇게하면 행 다바뀜
df
# 결측치 처리 ####
df<-data.frame(no=c(1:5),names=c("K","L","P","C","Y"), score1=c(100,NA,80,70,60),score2=c(100,90,80,70,60))
mean(df$score1) #NA
mean(df$score1, na.rm=T) #NA
#df[is.na(df$score1),]<-mean(df$score1, na.rm=T) # 이렇게하면 행 다바뀜
df[which(is.na(df$score1))]<-mean(df$score1, na.rm=T) # 이렇게 열도 지정함
df
# 결측치 처리 ####
df<-data.frame(no=c(1:5),names=c("K","L","P","C","Y"), score1=c(100,NA,80,70,60),score2=c(100,90,80,70,60))
mean(df$score1) #NA
mean(df$score1, na.rm=T) #NA
#df[is.na(df$score1),]<-mean(df$score1, na.rm=T) # 이렇게하면 행 다바뀜
df[which(is.na(df))]<-mean(df$score1, na.rm=T) # 이렇게 열도 지정함
# 결측치 처리 ####
df<-data.frame(no=c(1:5),names=c("K","L","P","C","Y"), score1=c(100,NA,80,70,60),score2=c(100,90,80,70,60))
mean(df$score1) #NA
mean(df$score1, na.rm=T) #NA
#df[is.na(df$score1),]<-mean(df$score1, na.rm=T) # 이렇게하면 행 다바뀜
df[is.na(df$score1),"score1"]<-mean(df$score1, na.rm=T) # 이렇게 열도 지정함
df
plot(df)
colSums(df)
a<-data.frame(score1=c(100, NA, 99, 88), score2=c("A","B","A","B"))
mean(a$score1, na.rm=T)
sd(a$score1, na.rm=T)
sum(is.na(a))
table(is.na(a))
na.omit(a)
a
which(is.na(a),T)
which(is.na(a),F)
a<-data.frame(score1=c(100, NA, NA, 88), score2=c("A","B","A","B"))
which(is.na(a),F)
which(is.na(a)) # 결측치 행만 리턴 -> F
# 결측치 처리2 ####
a<-data.frame(score1=c(100, NA, 99, 88), score2=c("A","B","A","B"))
a[is.na(a$score1)]<-"#"
a
a<-data.frame(score1=c(100, NA, 99, 88), score2=c("A","B","A","B"))
a$score1[is.na(a$score1)]<-"#"
a
str(airquality)
head(airquality)
sum(is.na(airquality))
table(is.na(airquality))
colSums(is.na(airquality))
airquality<-na.omit(airquality)
str(airquality)
complete.cases(airquality)
colMeans(airquality)
colMeans(airquality, na.rm=T)
str(airquality)
head(airquality)
sum(is.na(airquality))
table(is.na(airquality))
colMeans(airquality)
colMeans(airquality, na.rm=T)
str(airquality)
install.packages("datasets")
library(datasets)
str(airquality)
head(airquality)
sum(is.na(airquality))
table(is.na(airquality))
colMeans(airquality)
colMeans(airquality, na.rm=T)
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
library(datasets)
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
library(datasets)
install.packages("datasets")
data("airquality")
str(airquality)
data("airquality")
str(airquality)
head(airquality)
sum(is.na(airquality))
table(is.na(airquality))
colMeans(airquality)
colMeans(airquality, na.rm=T)
library(MASS)
x<-Cars93
is.na(x)
library(MASS)
x<-Cars93
str(x)
sum(is.na(x))
table(is.na(x))
colSums(is.na(Cars93))
# 반환값 없음
test<-function(){
print("good!!!")
}
#반환값 있음
test1<-function(){
print("good!!!")
return (1+2) #괄호 반드시 해야함
}
test();test1() #결과는?
# 인자 없음
test <-function(){
print("good!!!")
}
# 인자 있음
test2<-function(val1){
print(val1)
}
#인자 있고, 반환값 있음
test3<-function(val1){
print(val1)
return (val1+100)
}
test();test2(1);test3(1) #결과는?
#반환값 있음
test1<-function(){
print("good!!!")
return (1+2) #괄호 반드시 해야함
}
test();test1() #결과는?
i=1
while(i<=9){
t=2*i
print(t)
i=i+1
}
a<-0
while(a<=100){
a=a+1
if(a%%3==0);next
a<-0
while(a<=100){
a=a+1
if(a%%3==0){next}
if(a==90){break}
if(a==99){exit}
print(a)
}
a<-c(“han”,”yang”,”cyber”,”univ”)
a<-c("han","yang,"cyber","univ")
a<-c("han","yang","cyber","univ")
s_len<-c()
for(i in 1:length(a)){
s_len[i]<-nchar(a[i])}
print(s_len)
a<-c("han","yang","cyber","univ")
s_len<-sapply(a,nchar)
print(s_len)
b<-function(x,y){
return(ifelse(x>=y,"pass","fail"))
}
score<-c(100,88,70,100,99)
result<-sapply(score,b,80)
print(result)
test<-data.frame(
Age=c(20,21,22),
Class=c('A','A','B'),
Sex=c('F','F','M'))
for(i in 1:nrow(test)){
if(test$Class[i]=='A'){
print(test$Age[i])
}
else{
print(test$Sex[i]) }
}
a<-c("han","yang","cyber","univ")
s_len<-c()
for(i in 1:length(a)){
s_len[i]<-nchar(a[i])}
print(s_len)
