a[a%%2==0, drop=F]
a[a%%2==0,, drop=F]
a[a%%2==0]
Orange
Orange
install.packages("ggplot2")
library(ggplot2)
search()
search(ggplot2)
rep(F,10,each=5)
rep(1:2,2,each=5)
a = rep(1:2,2,each=5)
a[-1:3]
a = rep(1:2,2,each=5)
a[-c(1:3)]
a<-seq(10,20)
print(a)
sales <- c(100,99,88,100,100)
names(sales)<- c('1','2','3','4','5')
cumsum(sales)
sort(b) #오름차순
cummin(b)
cummax(b)
sales <- c(100,99,88,100,100)
names(sales)<- c('1','2','3','4','5')
cumsum(sales)
sort(sales) #오름차순
cummin(sales)
cummax(sales)
a<-matrix(seq(10,20),2)
print(a)
a<-matrix(seq(10,20),3)
print(a)
a<-matrix(seq(10,19),2)
b<-matrix(seq(10,19),5)
print(a-b)
a[a%%2==0]
mat1<-matrix(1:6, ncol = 3, byrow=T)
mat1[mat1[,3]>3,,drop=F]#3열의 값이 3보다 큰 걸 가지고 있는 행 필터링, drop 3번째인수
mat1[mat1[,2]==2,drop=F]#2열의 값이 2인걸 가지고 있는 행 필터링, drop 3번째인수
a <- matrix(1:12, nrow=3, ncol=4, byrow=T)
colnames(a)<-c('a','b','c','d') # 크기 다르면 안 들어감
rownames(a)<-c('kim','lee','park')
a[1:2,-1]
a[a%%2==0, drop=F]
a[2,]>=4
a[a[2,]>=4, drop=F]
mat1<-matrix(1:6, ncol = 3, byrow=T)
mat1[mat1[,3]>3,,drop=F]#3열의 값이 3보다 큰 걸 가지고 있는 행 필터링
mat1[mat1[,2]==2,,drop=F]#2열의 값이 2인걸 가지고 있는 행 필터링
a[a[2,]>=4, drop=F]
a[a[,2]>=4, drop=F]
a[1:2,-1]
mat1<-matrix(1:6, ncol = 3, byrow=T)
mat1<-matrix(1:6, ncol = 3, byrow=T)
mat1<-matrix(1:6, ncol = 3)
mat1
a<-matrix(1:12, nrow=3)
a<-a[,-c(1,3)] # 열삭제
mat1[2,2,drop=F]# 인덱싱시 drop은 3번째
mat1[mat1>3,,drop=F]#3
mat1[mat1>3,drop=F]#3열
mat1<-matrix(1:6, ncol = 3, byrow=T)
mat1[mat1>3,drop=F]#
mat1<-matrix(1:6, ncol = 3, byrow=T)
mat1
mat1[mat1>3,drop=F]#3열의
mat1<-matrix(1:12, ncol = 3, byrow=T)
mat1
mat1[mat1>3,drop=F]#3열
a<-matrix(seq(10,19),nrow= 2, ncol=10)
b<-matrix(seq(10,19),5)
print(a-b)
print(a)
a<-matrix(seq(10,19),nrow= 2, ncol=4)
a<-3.5
b<-round(a)
c<-ceiling(a)
print(b+c)
a<-'h y c u'
b<-'univ '
print(nchar(a)+nchar(b))
print(1,2,3)
cat(1,2,3)
a<-T
b<-F
print((a==b)|(!b))
mat1<-matrix(1:12, nrow=2, byrow=T)
mat1
_score1<-1
a = rep(1:3,2,each=3)
a
a<-(13%/%2)
b<-(13%%2)
print(a+b)
a<-'h y c u'
b<-'univ '
print(nchar(a)+nchar(b))
print(1,2,3)
cat(1,2,3)
mat1<-matrix(1:12, nrow=2, byrow=T)
mat1
a<-(13%/%2)
b<-(13%%2)
print(a+b)
load("C:/Users/wogns/OneDrive/바탕 화면/Data_study/R스크립트/.RData")
setwd("C:/Users/wogns/OneDrive/바탕 화면/Data_study/R스크립트")
# 데이터 프레임 ####
df<-data.frame(no=c(1:5),names=c("K","L","P"), score=c(100,90,80))
# 데이터 프레임 ####
df<-data.frame(no=c(1:5),names=c("K","L","P","C","Y"), score=c(100,90,80,70,60))
df
# 데이터 프레임 ####
df<-data.frame(no=c(1:5),names=c("K","L","P","C","Y"), score=c(100,90,80,70,60))
df
rownames(df)<-c("a","b","c","d","e")
df
names=c("K","L","P","C","Y")
score=c(100,90,80,70,60)
df1<-data.frame(names,score)
df1
df2<-data.frame(matrix(1:12, nrow = 2),matrix(1:12,nrow = 2))
df2
# 행, 열 추가삭제 ####
df<-data.frame(A=c(1,2,3), B=c('a','b','c'))
t<-data.frame(A=4, b="d")
df<- rbind(df,t)
df<-data.frame(A=c(1,2,3), B=c('a','b','c'))
t<-data.frame(A = 4, B ="d")
df<- rbind(df,t)
df
df<-data.frame(A=c(1,2,3), B=c('a','b','c'))
c_t<-c(4,5,6)
df<- cbind(df,c_t)
df
c_t<-c(4,5,6,7)
df<- cbind(df,c_t)
df<-data.frame(A=c(1,2,3), B=c('a','b','c'))
t<-data.frame(A = 4, B ="d") # 열이름 다으렴 에러
df<- rbind(df,t)
df[-4,]
df
df<-data.frame(A=c(1,2,3), B=c('a','b','c'))
t<-data.frame(A = 4, B ="d") # 열이름 다으렴 에러
df<- rbind(df,t)
df<-df[-4,]
df
df<-data.frame(no=c(1:5),names=c("K","L","P","C","Y"), score=c(100,90,80,70,60))
df
df[1,1]
df$names
df$names[2]
df<-data.frame(no=c(1:5),names=c("K","L","P","C","Y"), score=c(100,90,80,70,60))
df[df$score>90,]
df<-data.frame(no=c(1:5),names=c("K","L","P","C","Y"), score=c(100,90,80,70,60))
df[df$score>90,]
df[,df$score>90]
df[df$score>9=mean(df$score),]
df[df$score>=mean(df$score),]
df<-data.frame(no=c(1:5),names=c("K","L","P","C","Y"), score=c(100,90,80,70,60))
unique(df)
table(df$names)
duplicated(df)
# 결측치 처리 ####
df<-data.frame(no=c(1:5),names=c("K","L","P","C","Y"), score1=c(100,NA,80,70,60),score2=c(100,90,80,70,60))
mean(df$score1)
# 결측치 처리 ####
df<-data.frame(no=c(1:5),names=c("K","L","P","C","Y"), score1=c(100,NA,80,70,60),score2=c(100,90,80,70,60))
mean(df$score1) #NA
mean(df$score1, na.rm=T) #NA
# 결측치 처리 ####
df<-data.frame(no=c(1:5),names=c("K","L","P","C","Y"), score1=c(100,NA,80,70,60),score2=c(100,90,80,70,60))
mean(df$score1) #NA
mean(df$score1, na.rm=T) #NA
df[is.na(df$score1),]<-,mean[df$score1,na.rm=T]
# 결측치 처리 ####
df<-data.frame(no=c(1:5),names=c("K","L","P","C","Y"), score1=c(100,NA,80,70,60),score2=c(100,90,80,70,60))
mean(df$score1) #NA
mean(df$score1, na.rm=T) #NA
df[is.na(df$score1),]<-mean[df$score1, na.rm=T]
# 결측치 처리 ####
df<-data.frame(no=c(1:5),names=c("K","L","P","C","Y"), score1=c(100,NA,80,70,60),score2=c(100,90,80,70,60))
mean(df$score1) #NA
mean(df$score1, na.rm=T) #NA
df[is.na(df$score1),]<-mean(df$score1, na.rm=T)
# 결측치 처리 ####
df<-data.frame(no=c(1:5),names=c("K","L","P","C","Y"), score1=c(100,NA,80,70,60),score2=c(100,90,80,70,60))
mean(df$score1) #NA
mean(df$score1, na.rm=T) #NA
df[is.na(df$score1),]<-mean(df$score1, na.rm=T)
df
# 결측치 처리 ####
df<-data.frame(no=c(1:5),names=c("K","L","P","C","Y"), score1=c(100,NA,80,70,60),score2=c(100,90,80,70,60))
mean(df$score1) #NA
mean(df$score1, na.rm=T) #NA
df[is.na(df$score1)]<-mean(df$score1, na.rm=T)
df
# 결측치 처리 ####
df<-data.frame(no=c(1:5),names=c("K","L","P","C","Y"), score1=c(100,NA,80,70,60),score2=c(100,90,80,70,60))
mean(df$score1) #NA
mean(df$score1, na.rm=T) #NA
df[is.na(df$score1),]<-mean(df$score1, na.rm=T)
df
# 결측치 처리 ####
df<-data.frame(no=c(1:5),names=c("K","L","P","C","Y"), score1=c(100,NA,80,70,60),score2=c(100,90,80,70,60))
mean(df$score1) #NA
mean(df$score1, na.rm=T) #NA
df[is.na(df$score1),"score1"]<-mean(df$score1, na.rm=T) # 이렇게하면 행 다바뀜
df
# 결측치 처리 ####
df<-data.frame(no=c(1:5),names=c("K","L","P","C","Y"), score1=c(100,NA,80,70,60),score2=c(100,90,80,70,60))
mean(df$score1) #NA
mean(df$score1, na.rm=T) #NA
df[is.na(df$score1),]<-mean(df$score1, na.rm=T) # 이렇게하면 행 다바뀜
df[is.na(df$score1),"score1"]<-mean(df$score1, na.rm=T) # 이렇게하면 행 다바뀜
df
df[is.na(df$score1),"score1"]<-mean(df$score1, na.rm=T) # 이렇게하면 행 다바뀜
df
df<-data.frame(no=c(1:5),names=c("K","L","P","C","Y"), score1=c(100,NA,80,70,60),score2=c(100,90,80,70,60))
mean(df$score1) #NA
mean(df$score1, na.rm=T) #NA
#df[is.na(df$score1),]<-mean(df$score1, na.rm=T) # 이렇게하면 행 다바뀜
df[is.na(df$score1),"score1"]<-mean(df$score1, na.rm=T) # 이렇게하면 행 다바뀜
df
# 결측치 처리 ####
df<-data.frame(no=c(1:5),names=c("K","L","P","C","Y"), score1=c(100,NA,80,70,60),score2=c(100,90,80,70,60))
mean(df$score1) #NA
mean(df$score1, na.rm=T) #NA
#df[is.na(df$score1),]<-mean(df$score1, na.rm=T) # 이렇게하면 행 다바뀜
df[which(is.na(df$score1))]<-mean(df$score1, na.rm=T) # 이렇게 열도 지정함
df
# 결측치 처리 ####
df<-data.frame(no=c(1:5),names=c("K","L","P","C","Y"), score1=c(100,NA,80,70,60),score2=c(100,90,80,70,60))
mean(df$score1) #NA
mean(df$score1, na.rm=T) #NA
#df[is.na(df$score1),]<-mean(df$score1, na.rm=T) # 이렇게하면 행 다바뀜
df[which(is.na(df))]<-mean(df$score1, na.rm=T) # 이렇게 열도 지정함
# 결측치 처리 ####
df<-data.frame(no=c(1:5),names=c("K","L","P","C","Y"), score1=c(100,NA,80,70,60),score2=c(100,90,80,70,60))
mean(df$score1) #NA
mean(df$score1, na.rm=T) #NA
#df[is.na(df$score1),]<-mean(df$score1, na.rm=T) # 이렇게하면 행 다바뀜
df[is.na(df$score1),"score1"]<-mean(df$score1, na.rm=T) # 이렇게 열도 지정함
df
plot(df)
colSums(df)
a<-data.frame(score1=c(100, NA, 99, 88), score2=c("A","B","A","B"))
mean(a$score1, na.rm=T)
sd(a$score1, na.rm=T)
sum(is.na(a))
table(is.na(a))
na.omit(a)
a
which(is.na(a),T)
which(is.na(a),F)
a<-data.frame(score1=c(100, NA, NA, 88), score2=c("A","B","A","B"))
which(is.na(a),F)
which(is.na(a)) # 결측치 행만 리턴 -> F
# 결측치 처리2 ####
a<-data.frame(score1=c(100, NA, 99, 88), score2=c("A","B","A","B"))
a[is.na(a$score1)]<-"#"
a
a<-data.frame(score1=c(100, NA, 99, 88), score2=c("A","B","A","B"))
a$score1[is.na(a$score1)]<-"#"
a
str(airquality)
head(airquality)
sum(is.na(airquality))
table(is.na(airquality))
colSums(is.na(airquality))
airquality<-na.omit(airquality)
str(airquality)
complete.cases(airquality)
colMeans(airquality)
colMeans(airquality, na.rm=T)
str(airquality)
head(airquality)
sum(is.na(airquality))
table(is.na(airquality))
colMeans(airquality)
colMeans(airquality, na.rm=T)
str(airquality)
install.packages("datasets")
library(datasets)
str(airquality)
head(airquality)
sum(is.na(airquality))
table(is.na(airquality))
colMeans(airquality)
colMeans(airquality, na.rm=T)
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
library(datasets)
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
library(datasets)
install.packages("datasets")
data("airquality")
str(airquality)
data("airquality")
str(airquality)
head(airquality)
sum(is.na(airquality))
table(is.na(airquality))
colMeans(airquality)
colMeans(airquality, na.rm=T)
library(MASS)
x<-Cars93
is.na(x)
library(MASS)
x<-Cars93
str(x)
sum(is.na(x))
table(is.na(x))
colSums(is.na(Cars93))
# 반환값 없음
test<-function(){
print("good!!!")
}
#반환값 있음
test1<-function(){
print("good!!!")
return (1+2) #괄호 반드시 해야함
}
test();test1() #결과는?
# 인자 없음
test <-function(){
print("good!!!")
}
# 인자 있음
test2<-function(val1){
print(val1)
}
#인자 있고, 반환값 있음
test3<-function(val1){
print(val1)
return (val1+100)
}
test();test2(1);test3(1) #결과는?
#반환값 있음
test1<-function(){
print("good!!!")
return (1+2) #괄호 반드시 해야함
}
test();test1() #결과는?
i=1
while(i<=9){
t=2*i
print(t)
i=i+1
}
a<-0
while(a<=100){
a=a+1
if(a%%3==0);next
a<-0
while(a<=100){
a=a+1
if(a%%3==0){next}
if(a==90){break}
if(a==99){exit}
print(a)
}
a<-c(“han”,”yang”,”cyber”,”univ”)
a<-c("han","yang,"cyber","univ")
a<-c("han","yang","cyber","univ")
s_len<-c()
for(i in 1:length(a)){
s_len[i]<-nchar(a[i])}
print(s_len)
a<-c("han","yang","cyber","univ")
s_len<-sapply(a,nchar)
print(s_len)
b<-function(x,y){
return(ifelse(x>=y,"pass","fail"))
}
score<-c(100,88,70,100,99)
result<-sapply(score,b,80)
print(result)
test<-data.frame(
Age=c(20,21,22),
Class=c('A','A','B'),
Sex=c('F','F','M'))
for(i in 1:nrow(test)){
if(test$Class[i]=='A'){
print(test$Age[i])
}
else{
print(test$Sex[i]) }
}
a<-c("han","yang","cyber","univ")
s_len<-c()
for(i in 1:length(a)){
s_len[i]<-nchar(a[i])}
print(s_len)
a<-c("han","yang","cyber","univ")
s_len<-c()
for(i in 1:length(a)){
s_len[i]<-nchar(a[i])}
print(s_len)
# ####
install.packages('ggplot2')
# dplyr####
install.packages('dplyr')
library(dplyr)
if(!require(dplyr)) install.packages("dplyr"); library(dplyr)
a<-c(1:5)
a %>% sum
a
a<-list(no=c(1:5))
a
a$no %>% sum
a
a<-factor(c(1:10))
a %>% sum
a<-as.integer(a)
a %>% sum
a<-matrix(1:12, nrow=2)
a %>% sum
a
aa<-function(a){
return (a+10)
}
a<-data.frame(name=c('a','b'),score=c(100,99))
a$score %>% aa %>% mean %>% aa
a$score%>%mean
a$score%>%mean%>%sum
a$score %>% aa
a<-read.csv("1.csv")
a
class(a)
a%>%filter(mid>=25) # 원하는 행을 출력. 열의 조건만 입력 가능
a%>%filter(mid>=25 & final>=25 )
a%>%filter(mid>=25 & final>=25 & attend==20)
a%>% select(1:3) #열 범위만 제시(인덱싱방법과 같음 )
a%>% select(-1:-3)
a%>%filter(mid>=25)%>%select(c(1,3))
a%>%filter(quiz>=15)%>% select(1:4)
a%>% arrange(final)
a%>% arrange(desc(final))
a%>% distinct(dept)
# dept를 기준으로 quiz의 mean를구하기
a%>% group_by(dept) %>% summarize(mean(quiz))
# dept를 기준으로 quiz의 mean과final의 sumd을 구하기
a%>% group_by(dept) %>% summarize(q_mean=mean(quiz),f_sum= sum(final))
a<-read.csv("1.csv")
test<-read.csv("2.csv")
a%>% bind_rows(test)
a%>% bind_cols(test) #공통되는 열(name)의 갯수가 다르면 error. 공통되는 열들만 출력
a%>% bind_rows(test)
a%>% bind_cols(test)
a<-read.csv("1.csv")
test<-read.csv("2.csv")
a%>% bind_rows(test)
a%>% bind_cols(test)
a<-read.csv("1.csv")
test<-read.csv("2.csv")
a%>% bind_rows(test)
a%>% bind_cols(test)
a%>% inner_join(test)#
a<-read.csv("1.csv")
test<-read.csv("2.csv")
a%>% bind_rows(test)
a%>% bind_cols(test) #행갯수가 다르면 error. 열이름이 똑같으면 rename
a%>% inner_join(test)
library(ggplot2)
Orange%>% filter(Tree==1)%>%ggplot(aes(age, circumference))+geom_line()
Orange %>% filter(Tree==1) %>% ggplot(aes(age, circumference))+geom_line()
library(dplyr)
Orange %>% filter(Tree==1) %>% ggplot(aes(age, circumference))+geom_line()
Orange %>% filter(Tree==1) %>% ggplot(aes(age, circumference))+geom_line(color = 'red')
str(Orange)
ggplot(Orange, aes(age, circumference, color = Tree)) + geom_line()
ggplot(Orange, aes(age, circumference)) + geom_line(aes(color = Tree))
mpg <-as.data.frame(ggplot2::mpg)
#::를 이용하면 특정패키지에 들어있는 함수나 데이터 지정가능
geom_bar(stat="identify")
mpg <-as.data.frame(ggplot2::mpg)
#::를 이용하면 특정패키지에 들어있는 함수나 데이터 지정가능
geom_bar(stat="identify")
ggplot(data=mpg) + geom_bar(stat="identify")
geom_bar(stat="identity")
# y축을 해당변수의 값 그대로
ggplot(data=mpg) + geom_bar(aes(x=class, color=class), stat="identity")
ggplot(data=mpg) + geom_bar(aes(x=class, color=class), stat="identity")
ggplot(data=class_counts, aes(x=class, y=count, fill=class)) +
geom_bar(stat="identity", color="black")
class_counts <- as.data.frame(table(mpg$class))
colnames(class_counts) <- c("class", "count")
ggplot(data=class_counts, aes(x=class, y=count, fill=class)) +geom_bar(stat="identity", color="black")
ggplot(data=mpg) + geom_bar(aes(x=class, color=class))
ggplot(data=mpg, aes(x=class, color=class)) + geom_bar()
class_counts <- as.data.frame(table(mpg$class))
colnames(class_counts) <- c("class", "count")
ggplot(data=class_counts, aes(x=class, y=count, fill=class)) +geom_bar(stat="identity", color="black")
data("Cars93")
ggplot( Cars93, aes(x=Passengers)) +  geom_histogram(fill="#F8766D")
f(!require(MASS)) install.packages("MASS"); library(MASS)
if(!require(MASS)) install.packages("MASS"); library(MASS)
data("Cars93")
ggplot( Cars93, aes(x=Passengers)) +  geom_histogram(fill="#F8766D")
p <- ggplot(ToothGrowth, aes(x=dose, y=len)) + geom_boxplot()
p
#  notch = True 인자를 통해서, box plot 모양 변경
ggplot(ToothGrowth, aes(x=dose, y=len)) + geom_boxplot(notch=TRUE)
