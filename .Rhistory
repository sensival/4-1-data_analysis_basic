#::를 이용하면 특정패키지에 들어있는 함수나 데이터 지정가능
geom_bar(stat="identify")
ggplot(data=mpg) + geom_bar(stat="identify")
geom_bar(stat="identity")
# y축을 해당변수의 값 그대로
ggplot(data=mpg) + geom_bar(aes(x=class, color=class), stat="identity")
ggplot(data=mpg) + geom_bar(aes(x=class, color=class), stat="identity")
ggplot(data=class_counts, aes(x=class, y=count, fill=class)) +
geom_bar(stat="identity", color="black")
class_counts <- as.data.frame(table(mpg$class))
colnames(class_counts) <- c("class", "count")
ggplot(data=class_counts, aes(x=class, y=count, fill=class)) +geom_bar(stat="identity", color="black")
ggplot(data=mpg) + geom_bar(aes(x=class, color=class))
ggplot(data=mpg, aes(x=class, color=class)) + geom_bar()
class_counts <- as.data.frame(table(mpg$class))
colnames(class_counts) <- c("class", "count")
ggplot(data=class_counts, aes(x=class, y=count, fill=class)) +geom_bar(stat="identity", color="black")
data("Cars93")
ggplot( Cars93, aes(x=Passengers)) +  geom_histogram(fill="#F8766D")
f(!require(MASS)) install.packages("MASS"); library(MASS)
if(!require(MASS)) install.packages("MASS"); library(MASS)
data("Cars93")
ggplot( Cars93, aes(x=Passengers)) +  geom_histogram(fill="#F8766D")
p <- ggplot(ToothGrowth, aes(x=dose, y=len)) + geom_boxplot()
p
#  notch = True 인자를 통해서, box plot 모양 변경
ggplot(ToothGrowth, aes(x=dose, y=len)) + geom_boxplot(notch=TRUE)
install.packages("caret", dependencies=TRUE)
library(caret)
wine_df<-read.csv(file="wine.csv", header=T)
wine_df$Class <- as.factor(wine_df$Class)
str(wine_df)
df <- wine_df
set.seed(2030)
total <- sample(nrow(df), nrow(df)*0.7)
train <- wine_df[total ,]
test <- wine_df[- total,]
train_x <- train[,1:13]
train_y <- train[,14]
test_x <- test[,1:13]
test_y <- test[,14]
ctrl <- trainControl(method="repeatedcv",number=10,
repeats = 5)
customGrid <- expand.grid(k=1:10)
knnFit <- train(Class ~ .,
data = train,
method = "knn",
trControl = ctrl,
preProcess = c("center","scale"),
tuneGrid=customGrid,
metric="Accuracy")
knnFit # 모델에 대해 실행
plot(knnFit) #실행 모델 시각화
pred_test <- predict(knnFit, newdata=test) #예측
confusionMatrix(pred_test, test$Class) #검증 메트릭스
importance_knn <- varImp(knnFit, scale=FALSE) # 모델에서 중요한 속성 파
악
install.packages("caret", dependencies=TRUE)
library(caret)
wine_df<-read.csv(file="wine.csv", header=T)
wine_df$Class <- as.factor(wine_df$Class)
str(wine_df)
df <- wine_df
set.seed(2030)
total <- sample(nrow(df), nrow(df)*0.7)
train <- wine_df[total ,]
test <- wine_df[- total,]
train_x <- train[,1:13]
train_y <- train[,14]
test_x <- test[,1:13]
test_y <- test[,14]
ctrl <- trainControl(method="repeatedcv",number=10,
repeats = 5)
customGrid <- expand.grid(k=1:10)
knnFit <- train(Class ~ .,
data = train,
method = "knn",
trControl = ctrl,
preProcess = c("center","scale"),
tuneGrid=customGrid,
metric="Accuracy")
knnFit # 모델에 대해 실행
plot(knnFit) #실행 모델 시각화
pred_test <- predict(knnFit, newdata=test) #예측
confusionMatrix(pred_test, test$Class) #검증 메트릭스
importance_knn <- varImp(knnFit, scale=FALSE) # 모델에서 중요한 속성 파악
plot(importance_knn)
install.packages("caret", dependencies = TRUE)
install.packages("caret", dependencies = TRUE)
class_a<-matrix(c(100,99,100,88,100,100),nrow=2)
class_b<-matrix(c(99,88,100,100,100,99,70,70,70), nrow=2)
st<-data.frame(class_a,class_b)
class_a<-matrix(c(100,99,100,88,100,100),nrow=2)
class_b<-matrix(c(99,88,100,100,100,99,70,70), nrow=2)
st<-data.frame(class_a,class_b)
class_a<-matrix(c(100,99,100,88,100,100),nrow=2)
class_b<-matrix(c(99,88,100,100,100,99,70,70), nrow=2)
st<-data.frame(class_a,class_b);st
colnames(st)<-c('JAVA','c','c++','python','ML','deepL')
st
colnames(st)<-c('JAVA','c','c++','python','ML','deepL','xml',graphics)
st
df<-data.frame(A=c(1,2,3), B=c('a','b','c'))
t<-data.frame(A = 4, c ="d") # 열이름 다르면 에러
df<- rbind(df,t)
df<-data.frame(no=c(1:5),names=c("K","L","P","C","Y"), score=c(100,90,80,70,60))
df
df[1,1]
df[1]
df[[1]
df[[1]]
df[[1]]
df$names
df$names[2]
df[,1]
df[,1] # 벡터형태
df[1,]
df<-data.frame(no=c(1:5),names=c("K","L","P","C","Y"), score=c(100,90,80,70,60))
unique(df)
table(df$names)
duplicated(df)
# 결측치 처리1 ####
df<-data.frame(no=c(1:5),names=c("K","L","P","C","Y"), score1=c(100,NA,80,70,60),score2=c(100,90,80,70,60))
mean(df$score1) #NA
mean(df$score1, na.rm=T) #NA
sd(df$score1, na.rm=T) #NA
library(MASS)
x<-Cars93
str(x)
is.na(x)
sum(is.na(x))
table(is.na(x))
which(is.na(a),T)
which(is.na(a),T)
a<-data.frame(score1=c(100, NA, 99, 88), score2=c("A","B","A","B"))
which(is.na(a),T)
x<-Cars93
Cars93_2 <- Cars93[ complete.cases(Cars93[ , c("Rear.seat.room")]), ]
Cars93_2 <- Cars93[ complete.cases(Cars93[ , "Rear.seat.room"]), ]
sum(is.na(Cars93))
sum(is.na(Cars93_2))
Cars93_1 <- Cars93[ complete.cases(Cars93[ , c("Rear.seat.room")]), ]
sum(is.na(Cars93_1))
test<-function(){
print("good!!!")
}
#반환값 있음
test1<-function(){
print("good!!!")
return (1+2) #괄호 반드시 해야함
}
test();test1() #결과는?
a<-1;b<-2;c<-3;
t<-function(){
a<-10
b<-20
c<-30
cat(a,b,c)
}
t(a,b,c)
a<-1;b<-2;c<-3;
t<-function(a,b,c){
a<-10
b<-20
c<-30
cat(a,b,c)
}
t(a,b,c)
cat(a,b,c)
item<-100000
if(item>=100000){
print("골드")}
else if(item>=50000){
item<-100000
if(item>=100000){
print("골드")
}else if(item>=50000){
print("실버")
}else{
print("브론즈")}
item<-100000
if(item>=50000)(item>=100000){
item<-100000
if(item>=50000){
print("골드")
}else if(item>=100000){
print("실버")
}else{
print("브론즈")}
a<-10
ifelse(a%%2==0,"even","odd“)
ifelse(a%%2==0,"even","odd")
ifelse(a%%2==0,"even","odd")
tmp<-1:10
ifelse(tmp< 5, "5미만", ifelse(tmp< 8, "8미만", "8이상"))
a<-list(no=c(1:5))
a
a$no %>% sum
library(dplyr)
a$no %>% sum
a
a<-matrix(1:12, nrow=2)
a %>% sum
a
a<-read.csv("1.csv")
a
class(a)
a%>% distinct(name)
a%>% distinct(dept, .keep_all=T)
a %>% sample_n(2)
a%>% sample_frac(0.3)
# dept를 기준으로 quiz의 mean를구하기
a%>% group_by(dept) %>% summarize(mean(quiz))
a %>% mutate(total=quiz+mid+final+attend)
a
a<-read.csv("1.csv")
test<-read.csv("2.csv")
a%>% bind_rows(test)
a%>% inner_join(test)
a%>% bind_cols(test) #행갯수가 다르면 error. 열이름이 똑같으면 rename
Orange %>% filter(Tree==1) %>% ggplot(aes(age, circumference))+geom_line()
library(ggplot2)
library(dplyr)
Orange %>% filter(Tree==1) %>% ggplot(aes(age, circumference))+geom_line()
ggplot(aes(1, 2))+geom_line(color = 'red')
ggplot(aes(1, 2))+geom_point(color = 'red')
ggplot(aes(x=1, y=2))+geom_point(color = 'red')
ggplot(aes(x=c(1:5), y=(1:5)))+geom_point(color = 'red')
Orange %>% filter(Tree==1) %>% ggplot(aes(age, circumference))+geom_line(color = 'red')
Orange %>% filter(Tree==1) %>% ggplot(aes(age, circumference))+geom_line(colour = 'red')
ggplot(data=mpg, aes(x=class, color=class)) + geom_bar()
p <- ggplot(ToothGrowth, aes(x=dose, y=len)) + geom_boxplot()
p
ggplot( Cars93, aes(x=Passengers)) +  geom_histogram(fill="#F8766D")
ggplot(data=mpg) + geom_bar(aes(x=class, color=class))
ggplot(data=class_counts, aes(x=class, y=count, fill=class)) +geom_bar(stat="identity", color="black")
ggplot(data=class_counts, aes(x=class, y=count, fill=class)) +geom_bar(color="black")
ggplot(data=class_counts, aes(x=class, y=count, fill=class)) +geom_bar(stat="identity", colour="black")
ggplot(Orange, aes(age, circumference, colour = Tree)) + geom_line()
library(MASS)
data("Cars93")
ggplot( Cars93, aes(x=Passengers)) +  geom_histogram(fill="#F8766D")
ggplot(data = iris, aes(x = Species, y = Sepal.Length)) +
geom_boxplot() +
labs(title = "Boxplot of Sepal Length by Species",
x = "Species",
y = "Sepal Length") +
theme_minimal()
ggplot(data=iris aes(x=Species, y=Sepal.Length))+
ggplot(data=iris, aes(x=Species, y=Sepal.Length))+theme_light()+geom_boxplot(aes(fill=Species), outlier.shape=21)
ggplot(Orange, aes(x=age, y=circumference, fill=Tree))+geom_bar(stat='identity')
ggplot(Orange, aes(x=age, y=circumference))+geom_line(size=1, aes(color=Tree))
ggplot(Orange, aes(x=age, y=circumference, color=Tree))+geom_point()
ggplot(Orange, aes(x=age, y=circumference, color=Tree))+geom_line(size=4)
library(caret)
wine_df<-read.csv(file="wine.csv", header=T)
wine_df$Class <- as.factor(wine_df$Class)
str(wine_df)
df <- wine_df
set.seed(2030)
total <- sample(nrow(df), nrow(df)*0.7)
train <- wine_df[total ,]
test <- wine_df[- total,]
train_x <- train[,1:13]
train_y <- train[,14]
test_x <- test[,1:13]
test_y <- test[,14]
ctrl <- trainControl(method="repeatedcv",number=10,
repeats = 5)
customGrid <- expand.grid(k=1:10)
knnFit <- train(Class ~ .,
data = train,
method = "knn",
trControl = ctrl,
preProcess = c("center","scale"),
tuneGrid=customGrid,
metric="Accuracy")
knnFit # 모델에 대해 실행
plot(knnFit) #실행 모델 시각화
pred_test <- predict(knnFit, newdata=test) #예측
confusionMatrix(pred_test, test$Class) #검증 메트릭스
importance_knn <- varImp(knnFit, scale=FALSE) # 모델에서 중요한 속성 파악
plot(importance_knn)
confusionMatrix(pred_test, test$Class) #검증 메트릭스
knnFit
df<-data.frame(no=c(1:5),names=c("K","L","P","C","Y","Y"), score=c(100,90,80,70,60,50))
df<-data.frame(no=c(1:6),names=c("K","L","P","C","Y","Y"), score=c(100,90,80,70,60,50))
unique(df)
table(df$names)
duplicated(df)
table(is.na(airquality))
which(is.na(a),T)
# 결측치 검색 ####
a<-data.frame(score1=c(100, NA, 99, 88), score2=c("A","B","A","B"))
which(is.na(a),T) # 행/열 정확히 알려달라->T
which(is.na(a)) # 결측치 행만 리턴 -> F (디폴트)
complete.cases(a)
test3<-function(val1){
print(val1)
return (val1+100)
}
test();test2(1);test3(1) #결과는?
# 인자 없음
test <-function(){
print("good!!!")
}
# 인자 있음
test2<-function(val1){
print(val1)
}
#인자 있고, 반환값 있음
test3<-function(val1){
print(val1)
return (val1+100)
}
# 인자 없음
test <-function(){
print("good!!!")
}
# 인자 있음
test2<-function(val1){
print(val1)
}
#인자 있고, 반환값 있음
test3<-function(val1){
print(val1)
return (val1+100)
}
test();test2(1);test3(1) #결과는?
a<-1;b<-2;c<-3;
t<-function(a,b,c){
a<-10
b<-20
c<-30
cat(a,b,c)
}
t(a,b,c)
cat(a,b,c)
a<-read.csv("1.csv")
a
a%>% distinct(c(dept,name), .keep_all=T)
library(dplyr)
a%>% distinct(c(dept,name), .keep_all=T)
a%>% distinct(dept, name, .keep_all=T)
a%>% distinct(dept, name)
a%>% group_by(dept) %>% summarize(mean(quiz))
a%>% bind_cols(test) #행갯수가 다르면 error. 열이름이 똑같으면 rena
a%>% bind_rows(test)
a<-read.csv("1.csv")
test<-read.csv("2.csv")
# 원하는 열만 읽기 select ####
a%>% select(1:3) #열 범위만 제시(인덱싱방법과 같음 )
a%>% bind_rows(test)
a%>% bind_cols(test) #행갯수가 다르면 error. 열이름이 똑같으면 rename
knnFit <- train(Class ~ .,
data = train,
method = "knn",
trControl = ctrl,
preProcess = c("center","scale"),
tuneGrid=customGrid,
metric="Accuracy")
library(caret)
wine_df<-read.csv(file="wine.csv", header=T)
wine_df$Class <- as.factor(wine_df$Class)
str(wine_df)
df <- wine_df
set.seed(2030)
total <- sample(nrow(df), nrow(df)*0.7)
train <- wine_df[total ,]
test <- wine_df[- total,]
train_x <- train[,1:13]
train_y <- train[,14]
test_x <- test[,1:13]
test_y <- test[,14]
ctrl <- trainControl(method="repeatedcv",number=10,
repeats = 5)
customGrid <- expand.grid(k=1:10)
knnFit <- train(Class ~ .,
data = train,
method = "knn",
trControl = ctrl,
preProcess = c("center","scale"),
tuneGrid=customGrid,
metric="Accuracy")
knnFit # 모델에 대해 실행
plot(knnFit) #실행 모델 시각화
pred_test <- predict(knnFit, newdata=test) #예측
confusionMatrix(pred_test, test$Class) #검증 메트릭스
importance_knn <- varImp(knnFit, scale=FALSE) # 모델에서 중요한 속성 파악
plot(importance_knn)
if(!require(dplyr)) install.packages("dplyr"); library(dplyr)
if(!require(ggplot2)) install.packages('ggplot2'); library(ggplot2)
if(!require(MASS)) install.packages("MASS"); library(MASS)
data('Cars93')
#내부에색상을지정한히스토그램을그리며, x축에탑승자수, 탑승자수에따른분포를출력함
ggplot( Cars93, aes(x=Passengers)) +
geom_histogram(fill="#F8766D")
a_df %>% mutate(total=R_score+Python_score, avg=(R_score+Python_score)/2)
a_df<-data.frame(name=c('kim','lee','oh','hong','kang1'),
dept=c('sw','comp','de','sw','sw'),
R_score=c(99,80,88,100,100),
Python_score=c(100,90,100,100,100)
)
a_df %>% group_by(dept) %>% summarize(mean(R_score))
a_df %>% group_by(dept) %>% summarize(R_mean=mean(R_score),Py_mean=mean(Python_score))
a_df %>% mutate(total=R_score+Python_score, avg=(R_score+Python_score)/2)
a_df
a_df<-data.frame(name=c('kim','lee','oh','hong','kang1'),
dept=c('sw','comp','de','sw','sw'),
R_score=c(99,80,88,100,100),
Python_score=c(100,90,100,100,100)
)
a_df %>% group_by(dept) %>% summarize(mean(R_score))
a_df %>% group_by(dept) %>% summarize(R_mean=mean(R_score),Py_mean=mean(Python_score))
a_df %>% mutate(total=R_score+Python_score, avg=(R_score+Python_score)/2);a_df
install.packages("caret", dependencies=TRUE)
library(caret)
wine_df<-read.csv(file="wine.csv", header=T)
wine_df$Class <- as.factor(wine_df$Class)
str(wine_df)
df <- wine_df
set.seed(2030)
total <- sample(nrow(df), nrow(df)*0.7)
train <- wine_df[total ,]
test <- wine_df[- total,]
train_x <- train[,1:13]
train_y <- train[,14]
test_x <- test[,1:13]
test_y <- test[,14]
ctrl <- trainControl(method="repeatedcv",number=10,
repeats = 5)
customGrid <- expand.grid(k=1:10)
knnFit <- train(Class ~ .,
data = train,
method = "knn",
trControl = ctrl,
preProcess = c("center","scale"),
tuneGrid=customGrid,
metric="Accuracy")
library(caret)
wine_df<-read.csv(file="wine.csv", header=T)
wine_df$Class <- as.factor(wine_df$Class)
str(wine_df)
df <- wine_df
set.seed(2030)
total <- sample(nrow(df), nrow(df)*0.7)
train <- wine_df[total ,]
test <- wine_df[- total,]
train_x <- train[,1:13]
train_y <- train[,14]
test_x <- test[,1:13]
test_y <- test[,14]
ctrl <- trainControl(method="repeatedcv",number=10,
repeats = 5)
customGrid <- expand.grid(k=1:10)
knnFit <- train(Class ~ .,
data = train,
method = "knn",
trControl = ctrl,
preProcess = c("center","scale"),
tuneGrid=customGrid,
metric="Accuracy")
knnFit # 모델에 대해 실행
plot(knnFit) #실행 모델 시각화
pred_test <- predict(knnFit, newdata=test) #예측
confusionMatrix(pred_test, test$Class) #검증 메트릭스
importance_knn <- varImp(knnFit, scale=FALSE) # 모델에서 중요한 속성 파악
plot(importance_knn)
df
print(table(a))
a<-c(1,2,3,4,5,5,6,7,7,8,8,9)
print(table(a))
df<-data.frame(no=c(1:6),names=c("K","L","P","C","Y","Y"), score=c(100,90,80,70,60,50))
unique(df)
table(df$names)
duplicated(df)
sd(df$score)
a<-read.csv("1.csv")
a
class(a)
# 원하는 행만 읽기 filter ####
a%>%filter(mid>=25) # 원하는 행을 출력. 열의 조건만 입력 가능
library(dplyr)
a<-read.csv("1.csv")
a
class(a)
# 원하는 행만 읽기 filter ####
a%>%filter(mid>=25) # 원하는 행을 출력. 열의 조건만 입력 가능
a%>%filter(mid>=25 & final>=25 )
a%>%filter(mid>=25 & final>=25 & attend==20)
# 원하는 열만 읽기 select ####
a%>% select(1:3) #열 범위만 제시(인덱싱방법과 같음 )
a%>% select(-1:-3)
a%>% select(name)
a%>% sample_frac(0.4)
df<-data.frame(no=c(1:5),names=c("K","L","P","C","Y"), score=c(100,90,80,70,60))
df[df$score>90,]#score가 90넘는 학생 리턴
df[df$score != 90,]#score가 90넘는 학생 리턴
a<-data.frame(score1=c(100, NA, 99, 88), score2=c("A","B","A","B"))
mean(df$score1) #NA
complete.cases(a)
df<-data.frame(no=c(1:5),names=c("K","L","P","C","Y"), score=c(100,90,80,70,60))
df
rownames(df)<-c("a","b","c","d","e")
columns(df)
mean(class_b[,3])
class_b
mean(class_b[,3])
colnames(st)
df[df$score != 90,]#score가 90넘는 학생 리턴
table(df$names)
sd(df$score)
