a <- c(1,3,5)
b <- c(2,0,-2)
a/b # 0으로 나누면 Inf
print(a-10)
print(a^2)
a<-c(1,2,NA,5,8)
mean(a) # 결측치있으면 NA로 나옴
av=mean(a, na.rm=T) # na.rm=T로 결측치 빼고
a[3] <- av
score <- c(100, 88, 99, 100, 99, 100)
score[score>=mean(score)]
score[score>=90]
score[score<=mean(score)]<--1 # true만 -1로 변경
print(score)
score<=mean(score)
# 이렇게 하면 T/F만
b <-  c(90, 80,100,100, 99)
sort(b) #오름차순
score[score==NA]
score[a==NA]
a[a==NA]
a<-c(1,2,NA,5,8)
mean(a) # 결측치있으면 NA로 나옴
av<-mean(a, na.rm=T) # na.rm=T로 결측치 빼고
a[3] <- av
a<-c(1,2,NA,5,8)
a[is.na(a)] <- av
a
a<-c(1,2,NA,5,NA)
av<-mean(a, na.rm=T) # na.rm=T로 결측치 빼고
a[is.na(a)] <- av
a
a <- list(1:3, 4:10)
a
b <- list(a=c(1:3),b=(4:10))
b
b <- list(a=c(1:3),b=(4:10))
b
b <- list(a=c(1:3),b=(4:10))
a
b
a
b <- list(a=c(1:3),b=(4:10))
a
b <- list(a=c(1:3),b=(4:10))
a
b
b[[1]]
b$a
b[1]
c<-list(1:5, c(1:3),matrix(1:12,nrow=3))
c
c[[1]][1]
c<-list(a=(1:5), c(1:3),matrix(1:12,nrow=3))
c
c[[1]][1]
c$a[3]
b[1]
b[1]
b[[1]]
c[a]
c<-list(a=(1:5), c(1:3),matrix(1:12,nrow=3))
c[a]
c[[a]]
c[['a']]
c['a']
b$a
a <- list(num<-c(1:5),score<-c(99,88,99,100,100))
a$num
a <- list(num=c(1:5),score=c(99,88,99,100,100))
a$num
a$score>=90
a$num[a$score>=90]
a$num[a$score>=90]
a <- list(num=c(1:5),score=c(99,88,99,100))
a$score>=90
a$num[a$score>=90]
a <- list(num=c(1:5),score=c(99,88,99,100,100,100))
a$score>=90
a$num[a$score>=90]
a <- list(num=c(1:5),score=c(99,88,99,100,100,100))
a$score>=90
a$num[a$score>=90]
# 필터조건이 더 적을때
a <- list(num=c(1:5),score=c(99,88,99,100))
a$score>=90
a$num[a$score>=90] #
a <- list(num=c(1:5),score=c(99,88,99))
a$score>=90
a$num[a$score>=90] # 1 3 4 5
# 필터조건이 더 적을때
a <- list(num=c(1:5),score=c(99))
a$score>=90
a$num[a$score>=90] # 1 3 4
# 필터조건이 더 적을때
a <- list(num=c(1:5),score=c(99, 88))
a$score>=90
a$num[a$score>=90] # 1 3 4
a <- list(num=c(1:5),score=c(99, 88))
a$score>=90
a$num[a$score>=90] # 1 3 5
# 필터조건이 더 적을때
a <- list(num=c(1:5),score=c(99, 88, 99))
a$score>=90 # TRUE FALSE
a$num[a$score>=90] # 1 3 5
a <- list(1,2,3)
a
a$num <- c(4:6)
a
a$num[1] <-1
a
a$num <- NULL
a
a<- NULL
a
a <- list(1:5)
b <- list(4:10)
lapply(c(a,b), min)
sapply(c(a,b), min)
a <- list(1:5, 0:5)
b <- list(4:10)
lapply(c(a,b), min)
sapply(c(a,b), min)
a <- list(1:5, list(0:5, c(-1,3,5))
b <- list(4:10)
a <- list(1:5, list(0:5, list(-1:4)))
b <- list(4:10)
lapply(c(a,b), min) # [[1]] 1 [[2]] 0 [[3]] 4
a <- list(1:5, c(0,1,2))
b <- list(4:10)
lapply(c(a,b), min) # [[1]] 1 [[2]] 0 [[3]] 4
sapply(c(a,b), min) # 1 0 4
test
test <- factor(c('sw', 'com', 'design'))
test
test <- factor(c('sw', 'com', 'design'))
test
test2 <- factor(c(1,2,3,2,5,5,1,2,3,4,5))
test2
level(test2)
levels(test2)
nlevel(test2)
nlevels(test2)
data()
str(iris)
levels(iris$Species)
str(iris)
levels(iris$Species)<- c("예쁜꽃","더예쁜꽃","아주예쁜꽃")
head(iris)
levels(iris$Species)
print(iris)
a<-c(1,2,3)
a[-1]
a<-matrix(1:12, nrow=3)
a[a%%2==0]
a[a%%2==0,a%%2==0]
a<-matrix(1:12, nrow=3)
a[a<4,a<2]
a[a<4, drop=F]
# 인덱싱 ####
a<-matrix(1:12, nrow=3)
a[a%%2==0, drop=F]
# 배열####
a<- array(1:12,dim=(3,2,2))
# 배열####
a<- array(1:12,dim=C(3,2,2))
a <- array(1:12, dim=C(3,2,2))
a <- array(1:12, dim=c(3,2,2))
a
mat1<-matrix(1:6, ncol = 3, byrow=T)
mat1[mat1[,3]>3,]
mat1<-matrix(1:6, ncol = 3, byrow=T)
mat1[mat1[,3]>3,drop=F]
mat1<-matrix(1:6, ncol = 3, byrow=T)
mat1[mat1[,3]>3,,drop=F]
mat1[mat1[,2]==2,,drop=F]#2열의 값이 2인걸 가지고 있는 행 필터링
mat1<-matrix(1:9, nrow = 3)
mat2<-matrix(c(10,20,30,40,50,60,70,80,90), nrow = 3)
mat1+10 #대입은 아님
mat1+mat2 # 크기다르면 연산 x
colSums(mat1)
rowsums(mat1)
mat1<-matrix(1:9, nrow = 3)
mat2<-matrix(c(10,20,30,40,50,60,70,80,90), nrow = 3)
mat1+10 #대입은 아님
mat1+mat2 # 크기다르면 연산 x
colSums(mat1)
rowsum(mat1)
mat1<-matrix(1:9, nrow = 3)
mat2<-matrix(c(10,20,30,40,50,60,70,80,90), nrow = 3)
mat1+10 #대입은 아님
mat1+mat2 # 크기다르면 연산 x
colSums(mat1)
rowSum(mat1)
# matrix연산 ####
mat1<-matrix(1:9, nrow = 3)
mat2<-matrix(c(10,20,30,40,50,60,70,80,90), nrow = 3)
mat1+10 #대입은 아님
mat1+mat2 # 크기다르면 연산 x
colSums(mat1)
rowSums(mat1)
setwd("C:/Users/wogns/OneDrive/바탕 화면/Data_study/R스크립트")
load("C:/Users/wogns/OneDrive/바탕 화면/Data_study/R스크립트/.RData")
plot(cars, col='dark red')
read.csv("company.csv", header=T)
read.csv("company.csv", header=T);str(iris)
a<-scan("")
a
b<-scan(what="")
b
a<-readline("")
a
a<-readline("")
a
b<-as.numeric(readline(""))
b
b<-as.numeric(readline(""))
b
print(b)
print("hi")
print(a,b)
a<-1
b<-2
print(a,b)
a<-'a'
b<-'b'
c<-'c'
cat(a,b,c sep="&")
a<-'a'
b<-'b'
c<-'c'
cat(a,b,c sep=" ")
a<-'a'
b<-'b'
c<-'c'
cat(a,b,c sep="\n")
a<-'a'
b<-'b'
c<-'c'
cat(sep="\n", a,b,c )
a<-'a'
b<-'b'
c<-'c'
cat(sep="&", a,b,c )
read.csv("company.csv", header=T)
read.csv("company.csv")
read.table("company.csv", header="T")
read.table("company.csv", header=T)
read.table("company.csv", header=T, row.names=T)
read.table("company.csv", header=F)
read.table("score.txt" header=F)
#fold####
read.table("score.txt", header=F)
#fold####
read.table("score.txt", header=F)
#fold####
read.table("score.txt", header=T)
#fold####
scan("score.txt")
scan("score.txt", sep=" ")
scan(score.txt, sep=" ")
scan("score.txt", sep=" ", what="")
#fold####
scan("score.txt", sep="\t", what="")
#fold####
scan("score.txt", sep="\n", what="")
a <- list(1:3, 4:10)
a <- list(1:3, 4:10)
a
write.table(a,"a_table,txt", row.names=T)
a <- list(1:7, 4:10)
a
write.table(a,"a_table,txt", row.names=T)
a <- list(1:7, 4:10)
a
write.csv(a,"a_table,txt", row.names=T)
a <- list(1:7, 4:10)
a
write.csv(a,"a_csv,txt", row.names=T)
a<-1
class(a)
a<-2L
class(a)
num_1 <- 0
num_2 <- 10
as.logical(num_1)
as.logical(num_2)
log_1 <- TRUE
log_2 <- FALSE
as.numeric(log_1)
as.numeric(log_2)
as.integer(log_1)
as.integer(log_2)
num_1 <- 0
as.character(num_1)
temp3 <- as.logical("T")
temp4 <- as.logical("F")
temp3 <- as.logical("T")
temp5 <- as.logical("True")
temp6 <- as.logical("False")
temp7 <- as.logical("TRUE")
temp8 <- as.logical("FALSE")
temp9 <- as.logical("true")
temp10 <- as.logical("false")
paste(temp3, temp4, temp5, temp6, temp7, temp8, temp9, temp10 )
a<-1
b<-3
cat(a+b, a-b, a*b, a/b)
c<-0
d<-1
cat(a&b, a|b, !a, !b)
cat(c&b, c|d,!c, !d)
a<-1
b<-3
cat(a+b, a-b, a*b, a/b)
c<-0
d<-10
cat(a&b, a|b, !a, !b)
cat(c&b, c|d,!c, !d)
a<-1
b<-3
cat(a+b, a-b, a*b, a/b)
c<-0
d<-10
cat(a&b, a|b, !a, !b)
cat(c&b, c|d,!c, !d)
c<-0
d<-10
cat(a&b, a|b, !a, !b)
cat(c&b, c|d,!c, !d)
c<-0
d<-10
cat(c&b, c|d,!c, !d)
a<-"ABC"
class(a)
num_1 <- 0
num_2 <- 10
log_1 <- TRUE
log_2 <- FALSE
date_1 <- "2030-12-30"
date_2 <-as.Date(date_1, format = "%Y-%m-%d")
as.character(num_1)
as.character(log_1)
as.character(date_2)
as.numeric("10")
as.numeric("10.5")
class(as.numeric("10.5"))
as.logical("TRUE")
as.logical("FALSE")
as.logical("1")
as.logical("hy10")
as.numeric("hy10")
as.numeric("T")
as.logical("T")
date_1 <- "2030-12-30"
date_2 <-as.Date(date_1, format = "%Y-%m-%d")
as.numeric("10")
as.numeric("10.5")
class(as.numeric("10.5"))
as.logical("TRUE")
as.logical("FALSE")
as.logical("1")
as.logical("a")
as.numeric("b")
as.numeric("T")
as.logical("T")
date_1 <- "2030-12-30"
date_2 <-as.Date(date_1, format = "%Y-%m-%d")
num_1 <- 0
temp2 <- as.logical("string") # 문자열 로지컬 안됨
temp3 <- as.logical("T")
temp4 <- as.logical("F")
temp3 <- as.logical("t")
temp5 <- as.logical("True")
temp6 <- as.logical("False")
temp7 <- as.logical("TRUE")
temp8 <- as.logical("FALSE")
temp9 <- as.logical("true")
temp10 <- as.logical("false")
paste(temp3, temp4, temp5, temp6, temp7, temp8, temp9, temp10 )
a<-"hi good"
nchar(a)
paste("hi","nice","to","see" ,"you", sep="")
paste("hi","nice","to","see" ,"you")
paste0("hi","nice","to","see" ,"you")
a<- True
a<- TRUE
class(a)
a<- TRUE
as.numeric(a)
as.character(a)
a<-as.Date("2030-12-30")
class(a)
temp <- 2020-12-30 # 숫자형으로 올리면 2020-12-30=1978로 입력됨
c <- as.Date(temp)
c # 1975-06-02나옴
temp<-"30.12.30"
date1 <- as.Date(temp, "%y.%m.%d") # yyyy-mm-dd이 아닌 경우는 포맷필요
# 대문자 %Y는 네글자 년도
date1
Sys.Date() - date1
Sys.Date() + date1
Sys.Date() +1
a <- "hanyang"
b <- "cyber univ"
print(a); print(b)
class(a)
class(b)
nchar(a)
nchar(b)
paste(a,b)
paste(a, b, sep = ",")
paste0(a,b)
a+b
a<-T
b<-F
a==b
(a==b) & (!a)
(a==b) | (!a)
